;; Variables

(defpoll FOO :interval "1h"  "date '+%d'")  	
(defpoll DAY :interval "1h" "date '+%A'")
(defpoll POO :interval "1h" "date '+%B'")


;; Weather vars
(defpoll ICON :interval "1m" `scripts/weather --icon`)
(defpoll TEMP :interval "1m" `scripts/weather --temp`)
(defpoll HEX :interval "1m" `scripts/weather --hex`)

(defpoll art		:interval "1s"  "scripts/music coverloc")
(defpoll title		:interval "1s"  "scripts/music title")
(defpoll artist		:interval "1s"  "scripts/music artist")
(defpoll playpause	:interval "1s"  "scripts/music statusicon")

(defpoll uptime :interval "1m" "uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/'")
(defpoll packages :interval "5m" `pacman -Q | wc -l`)
(defpoll kernal :interval "5m" `uname -r`) 
(defpoll name :interval "5m" `whoami`)  
(defpoll host :interval "5m" `uname -n`) 
(defpoll wm :interval "5m" `echo $XDG_CURRENT_DESKTOP`) 


(defpoll tempc_percent :interval "1s" "scripts/tempc")


(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(defpoll est_time :interval "5s" "TZ='America/New_York' date '+\%H:\%M'")
(defpoll cst_hour :interval "5s" "TZ='America/Chicago' date '+\%H'")
(defpoll mst_hour :interval "5s" "TZ='America/Denver' date '+\%H '")
(defpoll pst_hour :interval "5s" "TZ='America/Los_Angeles' date '+\%H '")
(defpoll clock_date :interval "1m" "date '+%b %d, %Y'")
(defpoll clock_date_1 :interval "1m" "date '+%m %d'")
(defpoll clock_date_2 :interval "1m" "date '+%Y'")
(defpoll calendar_day :interval "1h" "date '+%d'")
(defpoll calendar_year :interval "1h" "date '+%Y'")
(defpoll volume_percent :interval "1s"  "scripts/sbvol --get")
(defpoll bluetooth :interval "1s" "rofi-bluetooth --status")
(defpoll bluetooth_full :interval "1s" "rofi-bluetooth --status")
(defpoll temp1_percent :interval "1s" "scripts/temp1")
(defpoll temp2_percent :interval "1s" "scripts/temp2")

(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")
(deflisten workspace "scripts/workspace")
(deflisten workspace2 "scripts/workspace2")
(deflisten appname "scripts/appname")

(defvar vol_reveal false)
(defvar blu_reveal false)
(defvar blu_main true)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar control_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)

(include "notifications.yuck")

;; widgets

(defwidget launcher []
  (box 
    :class "launcher_module"
    :orientation "h"
    (button
        :onclick "rofi -no-lazy-grab -show drun -theme ~/.config/hypr/rofi/list_launcher.rasi &"
        :class "iconlauncher" "󰌪")
   ))

(defwidget workspaces []
  (literal 
    :content workspace2))

(defwidget workspaces2 []
  (literal 
    :content workspace))

(defwidget appnames []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
	  :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false" 
        (literal 
            :content appname)
	    (revealer
	      :transition "slideright"
		    :reveal control_reveal
		    :duration "350ms"
        (box
            :vexpand "false"
            :hexpand "false"
            :orientation "h"
            :space-evenly "false"
            (button
                :class "app-button"
                :onclick "hyprctl dispatch togglefloating 1" "󰉪") 
		  	    (button
		  	        :class "app-button"
		  	        :onclick "hyprctl dispatch fullscreen 1" "")
		  	    (button
		  	        :class "app-button"
                :onclick "hyprctl dispatch killactive 1" ""))))))

(defwidget volume []
  (eventbox 
    :onhover "${EWW_CMD} update vol_reveal=true"
	:onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal vol_reveal
			    :duration "350ms"
	            (scale  
	                :class "volbar"
			        :value volume_percent
			        :orientation "h"
			        :tooltip "${volume_percent}%"
			        :max 100
			        :min 0
			        :onchange "amixer sset Master {}%" ))
	        (button
	            :onclick "${EWW_CMD} open --toggle audio_ctl"
	            :class "volume_icon"
	            "󰕾"))))
(defwidget blueW []
  (eventbox 
    :onhover "${EWW_CMD} update blu_reveal=true; ${EWW_CMD} update blu_main=false;"
	:onhoverlost "${EWW_CMD} update blu_reveal=false; ${EWW_CMD} update blu_main=true;"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal blu_reveal
			    :duration "350ms"
                  (label 
			        :class "headerWTemp" 
                    :text "${bluetooth_full}"))
	        (revealer 
	            :transition "slideleft"
			    :reveal blu_main
			    :duration "350ms"
                  (label 
			        :class "headerWTemp" 
                    :text "${bluetooth}"))
                )))

(defwidget weat []
    (box :vexpand "false" :hexpand "false" :orientation "h"
            (label 
			    :class "headerWeather" 
			    :halign "center" 
			    :valign "center" 
			    :style "color: ${HEX};"
                :text "${ICON}")
    )
)
(defwidget wtemp []
    (box :vexpand "false" :hexpand "false" :orientation "h"
            (label 
			    :class "headerWTemp" 
			    :halign "center" 
			    :valign "center" 
                :style "color: ${HEX};"
                :text "${TEMP}"
                )
    )
)
(defwidget temp1 []
    (box :class "temp_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value temp1_percent
                :class "tempbar"
                :thickness 4
                (button 
                :class "icontemp"
                :limit-width 2
                :show_truncated false
                :wrap false
                "")
            )
    )
)

(defwidget temp2 []
    (box :class "temp_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value temp2_percent
                :class "tempbar"
                :thickness 4
                (button 
                :class "icontemp"
                :limit-width 2
                :show_truncated false
                :wrap false
                "")
            )
    )
)
(defwidget tempc []
    (box :class "temp_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value tempc_percent
                :class "tempbar"
                :thickness 4
                (button 
                :class "icontemp"
                :limit-width 2
                :show_truncated false
                :wrap false
                "")
            )
    )
)


(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_RAM.used_mem_perc}
                :class "membar"
                :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
                :onclick "${EWW_CMD} open --toggle system"
                :show_truncated false
                :wrap false
                ""))))

(defwidget clock_module []
  (eventbox
      :onhover "${EWW_CMD} update time_rev=true"
  	:onhoverlost "${EWW_CMD} update time_rev=false"
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          
                (box
                    :orientation "v"
                    :spacing "0"
                    :space-evenly "false"
                    (box
                        :orientation "h"
                        :spacing "0"
                        :space-evenly "false"
                
                        (label
                            :text pst_hour
                            :class "clock_tz_class" )
                        (label
                            :text mst_hour
                            :class "clock_tz_class" )
                        (label
                            :text cst_hour
                            :class "clock_tz_class" )
                    )
                    (label
                        :text est_time
                        :class "clock_time_class" )
                )
                
           
          (revealer :transition "slideright"
  		    :reveal time_rev
  		    :duration "350ms"
            (box
              :space-evenly "false"
              :orientation "v"
              :spacing "0"
              (button 
                  :class "clock_date_class_2"
                  :onclick "${EWW_CMD} open --toggle calendar" clock_date_2)
              (button 
                  :class "clock_date_class_1"
                  :onclick "${EWW_CMD} open --toggle calendar" clock_date_1)
            )
             
                  
                  ))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
	    :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
      :text "󰵅"))))
  
(defwidget sep []
  (box 
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "|")))

;;define widget groups
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
        (launcher)
        ))
        
(defwidget workLeft1 []
	(box 
	    :orientation "v" 
		:space-evenly false  
        :halign "start"
		:class "vert_modules"
    (workspaces)))
        
(defwidget workLeft2 []
	(box 
	    :orientation "v" 
		:space-evenly false  
        :halign "start"
		:class "vert_modules"
    (workspaces2)))

(defwidget workLeft3 []
	(box 
	    :orientation "v" 
		:space-evenly false  
        :halign "start"
		:class "vert_modules2"
    (workspaces2)))
        
(defwidget workLeft4 []
	(box 
	    :orientation "v" 
		:space-evenly false  
        :halign "start"
		:class "vert_modules2"
    (workspaces)))
    
(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
    ))

(defwidget right []
	(box
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    
    (sep)
    (volume)
    (sep)
    (mem)
    (tempc)
    (wtemp)
    (weat)
    (sep)
    (blueW)
    (sep)
    (clock_module)
    (sep)
    (notif_button)
))
(defwidget right2 []
	(box
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    (volume)
    (sep)
    (mem)
    (temp1)
    (temp2)
    (sep)
    (wtemp)
    (weat)
    (sep)
    (blueW)
    (sep)
    (clock_module)
    (sep)
    (notif_button)
))

;;Define bar
(defwidget bar_layout1 []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
    ))

(defwidget bar_layout2 []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right2)
    ))
(defwidget bar_layout3 []
  (centerbox 
    :class "bar_class"
    :orientation "v"
    (workLeft1)
    ))
(defwidget bar_layout4 []
  (centerbox 
    :class "bar_class"
    :orientation "v"
    (workLeft2)
    ))

(defwindow bar0
    :exclusive false
    :{{monitor0}}
    :geometry (geometry 
        :x "0px"
        :y "0px"
        :width "38%"
        :height "54px"
        :anchor "top right")
    :stacking "fg"
    :windowtype "dock"
    (bar_layout1))
    
(defwindow bar1
    :exclusive false
    :{{monitor1}}
    :geometry (geometry 
        :x "0px"
        :y "0px"
        :width "34%"
        :height "54px"
        :anchor "top right")
    :stacking "fg"
    :windowtype "dock"
    (bar_layout1))


(defwindow bar2
    :exclusive false
    :{{monitor0}}
    :geometry (geometry 
        :x "-4px"
        :y "-2px"
        :width "0px"
        :height "0px"
        :anchor "bottom right")
    :stacking "fg"
    :windowtype "dock"
    (workLeft1))

(defwindow bar3
    :exclusive false
    :{{monitor1}}
    :geometry (geometry 
        :x "-4px"
        :y "-2px"
        :width "0px"
        :height "0px"
        :anchor "bottom right")
    :stacking "fg"
    :windowtype "dock"
    (workLeft2))
    

(defwindow bar5
    :exclusive false
    :{{monitor0}}
    :geometry (geometry 
        :x "-4px"
        :y "0px"
        :width "0px"
        :height "0px"
        :anchor "bottom right")
    :stacking "fg"
    :windowtype "dock"
    (workLeft3))
    
(defwindow bar4
    :exclusive false
    :{{monitor1}}
    :geometry (geometry 
        :x "-4px"
        :y "0px"
        :width "0px"
        :height "0px"
        :anchor "bottom right")
    :stacking "fg"
    :windowtype "dock"
    (workLeft4))



(defwidget audio []
	(box 
	    :class "audio-box"
	    :orientation "v"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false"
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "speaker_icon"
	            :orientation "v")
	        (box 
	            :orientation "v"
	            :halign "center"
	            :vexpand "false"
	            :hexpand "false"
                (label
                    :class "speaker_text"
                    :text "speaker"
                    :valign "center"
                    :halign "left" )
	            (box
	                :class "speaker_bar"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
	                (scale
	                    :value volume_percent
                        :space-evenly "false"
			            :orientation "h"
			            :onchange "amixer -D pulse sset Master {}%" 
                        :tooltip "volume on ${volume_percent}%"
			            :max 100
			            :min 0))))
        (label
            :text "_____________________________________"
            :class "audio_sep"
            :halign "center")
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "mic_icon"
	            :orientation "v")
	            (box 
	                :orientation "v"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
                    (label
                        :class "mic_text"
                        :text "mic"
                        :valign "center"
                        :halign "left" )
	                (box 
	                    :class "mic_bar"
	                    :halign "center"
	                    :vexpand "false"
	                    :hexpand "false"
	                    (scale
	                        :value mic_percent
                            :space-evenly "false"
			                :orientation "h"
                            :tooltip "mic on ${mic_percent}%"
			                :onchange "amixer -D pulse sset Capture {}%" 
			                :max 100
			                :min 0))))))
(defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    :{{monitor0}}
	:geometry (geometry 
        :x "20" 
		:y "7%" 
        :anchor "top right"
		:width "280px" 
		:height "60px")
    (audio))


;;Define System widget  
(defwidget system []
  (box 
    :class "sys_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_mem_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {EWW_RAM.used_mem_perc}
            :class "sys_mem"
            :thickness 9
            (label
                :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "v"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round((EWW_RAM.available_mem / 1024), 0)} | ${round((EWW_RAM.total_mem / 1024), 0)}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label 
                :text "${round((EWW_RAM.used_mem / 1024), 0)}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)
            ))))
(defwindow system
    :stacking "fg"
    :focusable "false"
    :screen 1
    :{{monitor0}}
	:geometry (geometry
            :x "20" 
			:y "7%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system))



;;Calendar Widget
(defwidget cal []
	(box 
	    :class "cal"
	    :orientation "v"
	    (box
	        :class "cal-in"
	        (calendar
			  :day calendar_day 
			  :year calendar_year))))
(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    :{{monitor0}}
	:geometry (geometry
        :x "20" 
	    :y "7%" 
        :anchor "top right"
	    :width "270px" 
	    :height "60px")
(cal))


(include "sidebar.yuck")
